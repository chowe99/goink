name: CI Pipeline

on:
  push:
    branches:
      - master  
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h db -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Apply migrations
        run: |
          until python manage.py migrate; do
            echo "Migration failed, retrying in 5 seconds..."
            sleep 5
          done

      - name: Run tests
        run: |
          python manage.py test

      - name: Check PostgreSQL logs if failure
        if: failure()
        run: |
          docker logs ${{ job.services.db.id }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get remote Docker image digest
        id: remote_digest
        run: |
          remote_digest=$(docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/goink:latest | jq -r '.config.digest')
          echo "::set-output name=digest::$remote_digest"
        continue-on-error: true

      - name: Build local Docker image
        id: local_digest
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/goink:latest .
          local_digest=$(docker inspect --format='{{.Id}}' ${{ secrets.DOCKER_USERNAME }}/goink:latest)
          echo "::set-output name=local_digest::$local_digest"

      - name: Compare image digests
        id: compare
        run: |
          if [ "${{ steps.remote_digest.outputs.digest }}" == "${{ steps.local_digest.outputs.local_digest }}" ]; then
            echo "Images are the same, pulling the image."
            echo "::set-output name=build_needed::false"
          else
            echo "Images are different, building and pushing the image."
            echo "::set-output name=build_needed::true"
          fi

      - name: Pull or push Docker image based on comparison
        run: |
          if [ "${{ steps.compare.outputs.build_needed }}" == "true" ]; then
            docker tag ${{ secrets.DOCKER_USERNAME }}/goink:latest ${{ secrets.DOCKER_USERNAME }}/goink:${{ github.ref_name }}
            docker tag ${{ secrets.DOCKER_USERNAME }}/goink:latest ${{ secrets.DOCKER_USERNAME }}/goink:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USERNAME }}/goink:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/goink:${{ github.ref_name }}
            docker push ${{ secrets.DOCKER_USERNAME }}/goink:${{ github.sha }}
          else
            docker pull ${{ secrets.DOCKER_USERNAME }}/goink:latest
          fi

      - name: Check PostgreSQL container logs if failed
        if: failure()
        run: |
          docker logs ${{ job.services.db.id }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only deploy from master branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /path/to/your/app
            docker-compose pull
            docker-compose up -d
            docker-compose exec web python manage.py migrate
          EOF

